//Complier: https://remix.ethereum.org/
// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0;

contract Bank {
    struct Account {
        uint balance;
    }

    mapping(address => mapping(uint => Account)) public user_accounts;
    mapping(address => uint) public numAccounts;

    function createAccount(uint accountId) public {
        require(accountId > 0, "Account ID should be greater than 0");
        require(user_accounts[msg.sender][accountId].balance == 0, "Account already created with this ID");

        user_accounts[msg.sender][accountId] = Account({
            balance: 0
        });
        numAccounts[msg.sender]++;
    }

    function deposit(uint accountId, uint amount) public {
        require(accountId > 0, "Account ID should be greater than 0");
        require(user_accounts[msg.sender][accountId].balance >= 0, "Account not created with this ID");

        user_accounts[msg.sender][accountId].balance += amount;
    }

    function withdraw(uint accountId, uint amount) public {
        require(accountId > 0, "Account ID should be greater than 0");
        require(user_accounts[msg.sender][accountId].balance >= amount, "Insufficient balance in the account");
        user_accounts[msg.sender][accountId].balance -= amount;
    }

    function getBalance(uint accountId) public view returns (uint) {
        require(accountId > 0, "Account ID should be greater than 0");
        require(user_accounts[msg.sender][accountId].balance >= 0, "Account not created with this ID");

        return user_accounts[msg.sender][accountId].balance;
    }

    function transfer(uint fromAccountId, uint toAccountId, uint amount) public {
        require(fromAccountId > 0 && toAccountId > 0, "Account ID should be greater than 0");
        require(user_accounts[msg.sender][fromAccountId].balance >= amount, "Insufficient balance in the source account");

        user_accounts[msg.sender][fromAccountId].balance -= amount;
        user_accounts[msg.sender][toAccountId].balance += amount;
    }
}



CODE EXPLAIN:

MetaMask is a software cryptocurrency wallet used to interact with the Ethereum blockchain.

A blockchain wallet is a cryptocurrency wallet that allows users to manage different kinds of cryptocurrenciesâ€”for example, Bitcoin or Ethereum. A blockchain wallet helps someone exchange funds easily.

A cryptocurrency is a digital currency, which is an alternative form of payment created using encryption algorithms

    Data Structures:
        The Account struct is defined to store information about an account, specifically its balance.
        Two mappings are used:
            user_accounts: A nested mapping that associates user addresses with a mapping of account IDs to Account structs. This is effectively a mapping of user accounts.
            numAccounts: A simple mapping that keeps track of the number of accounts each user has.

    Function: createAccount
        This function allows users to create a new account with a specified account ID.
        The require statements ensure that the provided account ID is greater than 0 and that no account with the same ID has been created for the same user.
        If the conditions are met, a new Account struct is created and assigned to the specified account ID for the user. Additionally, the number of accounts for the user is incremented.

    Function: deposit
        Users can deposit funds into their account using this function.
        The function checks that the provided account ID is greater than 0 and that the account exists (i.e., has been created previously).
        If the conditions are met, the specified amount is added to the account's balance.

    Function: withdraw
        Users can withdraw funds from their account using this function.
        The function checks that the provided account ID is greater than 0, that the account exists, and that the account has sufficient funds for withdrawal.
        If the conditions are met, the specified amount is subtracted from the account's balance.

    Function: getBalance
        This function allows users to check the balance of their account.
        It checks that the provided account ID is greater than 0, that the account exists, and then returns the current balance.

    Function: transfer
        Users can transfer funds from one account to another using this function.
        The function checks that both the source and destination account IDs are greater than 0, that the source account exists, and that the source account has sufficient funds for the transfer.
        If the conditions are met, the specified amount is transferred from the source account to the destination account by adjusting their balances accordingly.