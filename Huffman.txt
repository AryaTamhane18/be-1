class Node:
    """A Huffman Tree Node"""

    def __init__(self, freq_, symbol_, left_=None, right_=None):
        # frequency of symbol
        self.freq = freq_

        # symbol name (character)
        self.symbol = symbol_

        # node left of the current node
        self.left = left_

        # node right of the current node
        self.right = right_

        # tree direction (0/1)
        self.huff = ""


def print_and_generate_huffman_codes(node, val="", codes={}):
    """Print Huffman codes for all symbols and generate Huffman codes for the Huffman tree"""
    new_val = val + str(node.huff)

    if node.left:
        print_and_generate_huffman_codes(node.left, new_val, codes)
    if node.right:
        print_and_generate_huffman_codes(node.right, new_val, codes)

    if not node.left and not node.right:
        print(f"{node.symbol} -> {new_val}")
        codes[node.symbol] = new_val

    return codes


def build_huffman_tree(text):
    freq_dict = {}
    for char in text:
        if char != ' ':
            freq_dict[char] = freq_dict.get(char, 0) + 1

    nodes = [Node(freq, char) for char, freq in freq_dict.items()]

    while len(nodes) > 1:
        nodes = sorted(nodes, key=lambda x: x.freq)
        left = nodes[0]
        right = nodes[1]
        left.huff = 0
        right.huff = 1
        new_node = Node(left.freq + right.freq, left.symbol + right.symbol, left, right)
        nodes.remove(left)
        nodes.remove(right)
        nodes.append(new_node)

    return nodes[0]


def huffman_encode(text, codes):
    """Encode the input string using the provided Huffman codes"""
    encoded_text = ""
    for char in text:
        if char != ' ':
            encoded_text += codes[char]
    return encoded_text


# Take user input for a string
user_input = input("Enter a string: ")
# Build Huffman tree
root_node = build_huffman_tree(user_input)
# Generate and Print Huffman codes
print("\nHuffman Encoding:")
huffman_codes = print_and_generate_huffman_codes(root_node)
# Encode the input string
encoded_string = huffman_encode(user_input, huffman_codes)
print("\nEncoded String:", encoded_string)

EXPLANATION
    Defines a class Node to represent nodes in the Huffman tree.
    Each node has attributes for frequency (freq), symbol (symbol), left child (left), right child (right), and a Huffman code (huff). The default values for left_ and right_ are set to None.

    Defines a function print_and_generate_huffman_codes to recursively traverse the Huffman tree.
    Prints the Huffman codes for all symbols and generates a dictionary (codes) containing the Huffman codes for each symbol.

    Defines a function build_huffman_tree to build a Huffman tree based on the frequency of characters in the input text.
    Uses a dictionary (freq_dict) to count the frequency of each character in the text, excluding spaces.
    Creates a list of Node objects, each representing a unique character and its frequency.
    Constructs the Huffman tree by repeatedly combining the two nodes with the lowest frequencies until only one node (the root) remains.
    Returns the root node of the Huffman tree.

    Defines a function huffman_encode to encode a given text using the Huffman codes.
    Iterates through each character in the text (excluding spaces) and appends its corresponding Huffman code to the encoded_text. 
  
        Takes user input for a string.
    Builds a Huffman tree based on the input string.
    Generates and prints Huffman codes for each symbol in the tree.
    Encodes the input string using the Huffman codes and prints the result.

In a greedy approach, decisions are made at each step by selecting the locally optimal choice with the hope that these choices lead to a globally optimal solution

huffman for data encoding or data compression

small elemt on left n larger element on right


