import random

def deterministic_qs(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[0]
    left = [x for x in arr[1:] if x < pivot]
    right = [x for x in arr[1:] if x >= pivot]
    return deterministic_qs(left) + [pivot] + deterministic_qs(right)

def randomized_quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot_idx = random.randint(0, len(arr) - 1)
    pivot = arr[pivot_idx]
    left = [arr[i] for i in range(len(arr)) if i != pivot_idx and arr[i] < pivot]
    right = [arr[i] for i in range(len(arr)) if i != pivot_idx and arr[i] >= pivot]

    return randomized_quick_sort(left) + [pivot] + randomized_quick_sort(right)

arr = list(map(int,input("Enter the list of elements: ").split())) 
print("Deterministic Quick Sort: ")
print(deterministic_qs(arr))
print("Randomized Quick Sort: ")
print(randomized_quick_sort(arr))


randomised qsort

elements are in asending order in which we wanted it to be arranged then gives us worst case time complexity in ordr to over come it randomised quick sort is used 

change the partition element (pick any other random pivot)

Quick Sort is a sorting algorithm that follows the divide-and-conquer paradigm. It works by selecting a pivot element and partitioning the array into two sub-arrays: elements less than the pivot and elements greater than or equal to the pivot. This process is applied recursively to the sub-arrays.

Here's a short explanation of the deterministic and randomized variants of Quick Sort in the provided code:

    Deterministic Quick Sort (quick_sort):
        Pivot Selection: Always selects the first element as the pivot.
        Partitioning: Divides the array into two sub-arrays based on the pivot.
        Recursion: Applies the Quick Sort algorithm recursively to the sub-arrays.
        Base Case: Stops recursion when the array size is 1 or less.

    Randomized Quick Sort (randomized_quick_sort):
        Pivot Selection: Randomly selects a pivot element from the array.
        Partitioning: Divides the array into two sub-arrays based on the randomly chosen pivot.
        Recursion: Applies the Quick Sort algorithm recursively to the sub-arrays.
        Base Case: Stops recursion when the array size is 1 or less.

CODE EXPLANATION
    The random module is used for the randomized version, so the sorting outcome may vary due to the random pivot selection.
    Both functions use list comprehensions to create the left and right subarrays, excluding the chosen pivot element.

    Base Case: If the length of the array arr is 1 or less, it is already sorted, and the function returns the array as it is.
    Pivot Selection: The first element of the array (arr[0]) is chosen as the pivot element.
    Partitioning: Elements less than the pivot go to the left subarray, and elements greater than or equal to the pivot go to the right subarray. This is achieved using list comprehensions.
    Recursion: The function is called recursively on the left and right subarrays, and the results are concatenated with the pivot in the middle.


    Base Case: Similar to the deterministic version, if the length of the array is 1 or less, it is already sorted, and the array is returned.
    Random Pivot Selection: random.randint(0, len(arr) - 1) is used to choose a random index (pivot_idx) within the array, and the element at that index is selected as the pivot.
    Partitioning: Similar to the deterministic version, elements less than the pivot go to the left subarray, and elements greater than or equal to the pivot go to the right subarray.
    Recursion: The function is called recursively on the left and right subarrays, and the results are concatenated with the pivot in the middle.

        The user is prompted to enter a list of elements, which is converted to a list of integers using map(int, input().split()).
        The deterministic and randomized quicksort functions are called with the input array, and the sorted results are printed.

Overall, the code implements two versions of the Quick Sort algorithm: one with a deterministic pivot selection strategy and another with a randomized pivot selection strategy. These functions use recursion to sort subarrays and concatenate them to obtain the final sorted array. The randomized version introduces an element of randomness by selecting a random pivot, making it less predictable than the deterministic version

0(n2)


