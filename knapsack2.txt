def knapSack(W, wt, val, n):
    dp = [[0 for _ in range(W + 1)] for _ in range(n + 1)]

    for i in range(n + 1):
        for w in range(W + 1):
            if i == 0 or w == 0:
                dp[i][w] = 0
            elif wt[i - 1] <= w:
                dp[i][w] = max(val[i - 1] + dp[i - 1][w - wt[i - 1]], dp[i - 1][w])
            else:
                dp[i][w] = dp[i - 1][w]

    return dp[n][W], dp

def print_selected_items(dp, wt, val, W, n):
    w = W
    items = []

    for i in range(n, 0, -1):
        if dp[i][w] != dp[i - 1][w]:
            items.append(i)
            w -= wt[i - 1]

    return items

# Take inputs from the user
n = int(input("Enter the number of items: "))
profit = []
weight = []

for i in range(n):
    p = int(input(f"Enter profit for item {i + 1}: "))
    w = int(input(f"Enter weight for item {i + 1}: "))
    profit.append(p)
    weight.append(w)

W = int(input("Enter the knapsack capacity: "))

# Calculate and print the result
result, dp = knapSack(W, weight, profit, n)

print("\nItems in Knapsack:")
print("{:<8} {:<8} {:<8} {:<8}".format("Item", "Weight", "Profit", "Fraction"))

selected_items = print_selected_items(dp, weight, profit, W, n)
for item in selected_items:
    print("{:<8} {:<8} {:<8} {:<8}".format(item, weight[item - 1], profit[item - 1], 1))

print(f"\nThe maximum profit is: {result}")




OUTPUT:
Enter no. of items: 5
Maximum weight: 10  
Enter profit value of items: 10 15 10 12 8
Enter weight of items: 3 3 2 5 1
Item    Profit  DP TABLE
1       10      10
2       15      25
3       10      35
4       12      37
5       8       43
"""



EXPLANATION:
This function implements the dynamic programming solution to the 0/1 Knapsack problem. It returns the maximum value and the dp table.

This function takes the dp table, weights, values, knapsack capacity, and the number of items. It returns a list of selected items.

This section takes user inputs for the number of items, their profits, weights, and the knapsack capacity.

This section calls the knapSack function to calculate the maximum profit and dp table. It then prints the selected items, including their weights, profits, and the maximum profit achieved. The fractional value is set to 1, indicating that the whole item was included.

EEXPLANATION 2
This function, knapSack, is the core of the 0/1 Knapsack algorithm using dynamic programming. Here's a step-by-step explanation:

    Dynamic Programming Table (dp):
        The function initializes a 2D array dp with dimensions (n + 1) x (W + 1), where n is the number of items, and W is the knapsack capacity.
        The entry dp[i][w] represents the maximum value that can be obtained with the first i items and a knapsack capacity of w.

    Nested Loop Iteration:
        The outer loop (for i in range(n + 1)) iterates over the items.
        The inner loop (for w in range(W + 1)) iterates over the knapsack capacities from 0 to W.

    Base Cases:
        If i (number of items) is 0 or w (knapsack capacity) is 0, then dp[i][w] is set to 0. This is because with no items or no capacity, the maximum value is 0.

    Recursive Relation:
        If the weight of the current item (wt[i - 1]) is less than or equal to the current knapsack capacity (w), the function considers two choices:
            Include the current item: val[i - 1] + dp[i - 1][w - wt[i - 1]]
            Exclude the current item: dp[i - 1][w]
            The maximum of these two choices is assigned to dp[i][w].

    Returning Result:
        The function returns dp[n][W], which represents the maximum value that can be obtained with all items and the full knapsack capacity.



This function, print_selected_items, is used to backtrack through the dynamic programming table to determine which items were selected to achieve the maximum profit.

    Backtracking:
        The function starts at the bottom-right corner of the dynamic programming table (dp[n][W]).
        It iterates backward through the table and checks if the value at the current cell is different from the value in the cell above it (dp[i][w] != dp[i - 1][w]).
        If different, it means the item i was included in the optimal solution. The item index is appended to the items list, and the knapsack capacity is updated (w -= wt[i - 1]).

    Returning Result:
        The function returns a list of selected items.




This part of the code takes user input for the number of items, their profits, weights, and the knapsack capacity. It then calls the knapSack function to calculate the maximum profit and the dynamic programming table. Finally, it uses the print_selected_items function to print the selected items and their details, along with the maximum profit achieved.
