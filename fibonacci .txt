fibonacci 

print("\nFibonacci using Recursion")
n = int(input("Enter number of terms:"))
def fibonacci(n):
    if(n <= 1):
        return n
    else:
        return(fibonacci(n-1) + fibonacci(n-2))
print("\nFibonacci using Non-Recursion")
print("Fibonacci sequence:")
for i in range(n):
    print(fibonacci(i))

a = int(input("Enter the first number of the series: "))
b = int(input("Enter the second number of the series: "))
num = int(input("Enter the number of terms needed: "))
print("Fibonacci sequence: ")
print(a, b, end=" ")

while (num - 2):
    c = a + b
    a = b
    b = c
    print(c, end=" ")
    num = num - 1


In the recursive example, the function recursive_fibonacci calls itself until it reaches the base case. In the non-recursive example, the function iterative_fibonacci uses a loop to iteratively calculate the Fibonacci sequence without making recursive calls. Both examples produce the same output, but they use different approaches to compute the Fibonacci numbers.

F(n) = F(n-1) + F(n-2)recursive

TIME COMPLEXITY
 
-the time complexity of recursion depends on the number of times the function calls itself
-non recursive O(1)

SPACE COMPLEXITY 

-recursive O(n) non recursive O(1)

