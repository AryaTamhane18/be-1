N QUEENS:

class NQueensProblem:
    def __init__(self, n):
        self.queens = [-1] * n
        self.numSolutions = 0
        self.found_solution = False  # Flag to stop after one solution is found

    def solve(self):
        self.solve_helper(0)

    def solve_helper(self, row):
        if row == len(self.queens):
            if not self.found_solution:  # Check if a solution hasn't been found yet
                self.numSolutions += 1
                self.print_solution()
                self.found_solution = True  # Set the flag to stop further solutions
        else:
            for col in range(len(self.queens)):
                self.queens[row] = col
                if self.is_valid(row):
                    self.solve_helper(row + 1)

    def is_valid(self, row):
        for i in range(row):
            if (
                self.queens[i] == self.queens[row]
                or abs(self.queens[i] - self.queens[row]) == row - i
            ):
                return False
        return True

    def print_solution(self):
        if self.numSolutions == 1:
            print("Solution:", end=" ")
        for i in range(len(self.queens)):
            print(self.queens[i], end=" ")
        print()
        print("The Matrix Representation:")
        for i in range(len(self.queens)):
            for j in range(len(self.queens)):
                if j == self.queens[i]:
                    print("1", end=" ")  # Queen placement
                else:
                    print("0", end=" ")  # Empty cell
            print()
        print()

if __name__ == "__main__":
    n = int(input("Enter N for the N-Queens problem: "))
    NQueensProblem = NQueensProblem(n)
    NQueensProblem.solve()

EXPLANATION:
The n-queens problem is to place n queens (where n > 0) on an n -by-n chessboard so that no queen is threatened by another one

    Defines a class NQueensProblem to represent the N-Queens problem.
    The __init__ method initializes the class instance with the number of queens n.
    It initializes the queens list, which will store the column index of the queen in each row. Initially, all elements are set to -1.
    numSolutions is set to 0 to count the number of solutions found.
    found_solution is a flag set to False initially, indicating that no solution has been found yet.

Defines a method solve that initiates the solving process by calling solve_helper with the initial row set to 0.

    Defines a recursive helper method solve_helper that attempts to place queens on the chessboard row by row.
    Checks if the current row is equal to the length of self.queens, indicating that a solution for the entire board has been found.
    If a solution hasn't been found yet (not self.found_solution), increments the solution count, prints the solution, and sets found_solution to True to stop further solutions.
    If the solution is not complete, it iterates through each column in the current row and tries to place a queen.
    Calls itself recursively with the next row if a valid placement is found.

    Defines a method is_valid to check if a queen placement in the current row is valid.
    It checks if the new queen threatens any existing queens horizontally, vertically, or diagonally.

    Defines a method print_solution to print the queen placements and a matrix representation of the chessboard.
    If only one solution has been found, it prints "Solution:" before the queen placements.
    Prints the queen placements and the matrix representation using '1' for queen placement and '0' for an empty cell.  

  Checks if the script is being run as the main program.
    Takes user input for the number of queens n.
    Creates an instance of the NQueensProblem class with the given n.
    Calls the solve method to find and print a solution to the N-Queens problem.


A state space tree is a visual representation of the possible states and transitions in a problem-solving process. Nodes represent states, edges represent transitions, and the tree helps algorithmically explore and find solutions to problems

applications sudoku and graph colouring

time complexity is often expressed as O(bd)O(bd)
the space complexity is O(d)

Backtracking formulation is used to solve problems which deal with
searching for a set of solutions or which ask for an optimal solution satisfying some
constraints

    Explicit Constraints:
        These are the direct rules and conditions explicitly stated in the problem statement.
        In the 8-Queens problem, the explicit constraint is that no two queens can share the same row, column, or diagonal. Each queen must be placed in a unique position that avoids conflicts with other queens.

    Implicit Constraints:
        These are additional conditions that must be satisfied based on the nature of the problem or specific requirements.
        In the 8-Queens problem, implicit constraints may include:
            Board Size Constraint: The queens must be placed on an 8x8 chessboard.
            Number of Queens Constraint: Exactly eight queens must be placed on the board.
            Chessboard Bounds Constraint: Queens must be placed within the bounds of the chessboard.
            Validity of Positions: Positions must be valid and within the chessboard bounds.


NEW CODE:
import time
start = time.time()

def print_solution(board):
    for row in board:
        print(" ".join(row))
    print("\n")

def is_safe(board, row, col, n):
    # Check if no Queen can attack in the same column
    for i in range(row):
        if board[i][col] == 'Q':
            return False
    
    # Check if no Queen can attack in the left diagonal
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 'Q':
            return False
    
    # Check if no Queen can attack in the right diagonal
    for i, j in zip(range(row, -1, -1), range(col, n)):
        if board[i][j] == 'Q':
            return False
    
    return True

def solve_n_queens(board, row, n):
    if row == n:
        # All Queens are placed successfully, print the solution
        print_solution(board)
        return

    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = 'Q'
            solve_n_queens(board, row + 1, n)
            board[row][col] = '.'  # Backtrack

def n_queens(n):
    if n <= 0:
        return []

    board = [['.' for _ in range(n)] for _ in range(n)]
    solve_n_queens(board, 0, n)

n = int(input("Enter number of Queens: "))
n_queens(n)

end = time.time()
print("\nExecution time is: {}ms".format((end-start)*10**3))


